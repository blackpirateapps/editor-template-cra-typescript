{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","index.tsx"],"names":["HtmlElementId","HtmlClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","printUrl","text","keyMap","Map","Editor","props","editorKit","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","setState","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","handleInputChange","event","value","target","saveText","saveNote","onEditorValueChanged","error","console","log","onBlur","e","onFocus","onKeyDown","set","key","get","preventDefault","onKeyUp","delete","state","this","className","snComponent","id","tabIndex","href","rel","textarea","name","placeholder","rows","spellCheck","onChange","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGYA,EAKAC,E,uCCMGC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qDDNFH,K,2BAAAA,E,qBAAAA,M,cAKAC,K,2BAAAA,E,uCAAAA,M,KAUZ,IAAMU,EAAe,CACnBC,UAAU,EACVC,KAAM,IAGJC,EAAS,IAAIC,IAEIC,E,kDAGnB,WAAYC,GAAyB,IAAD,8BAClC,cAAMA,IAHRC,eAEoC,IAMpCC,mBAAqB,WACnB,IAAIC,EAAW,IAAIC,oBAAkB,CAEnCC,iBAAkB,SAACT,GACjB,EAAKU,SAAL,2BACKZ,GADL,IAEEE,WAGJW,iBAAkB,aAClBC,sBAAuB,iBAAM,MAG/B,EAAKP,UAAY,IAAIQ,YAAU,CAC7BN,SAAUA,EACVO,KAAM,YACNC,kBAAkB,KAtBc,EA0BpCC,kBAAoB,SAACC,GACnB,IACMC,EADSD,EAAME,OACAD,MACrB,EAAKE,SAASF,IA7BoB,EAgCpCE,SAAW,SAACpB,GACV,EAAKqB,SAASrB,GACd,EAAKU,SAAS,CACZV,KAAMA,KAnC0B,EAuCpCqB,SAAW,SAACrB,GAIV,IACE,EAAKK,UAAUiB,qBAAqBtB,GACpC,MAAOuB,GAEPC,QAAQC,IAAI,qBAAsBF,KA/CF,EAmDpCG,OAAS,SAACC,KAnD0B,EAqDpCC,QAAU,SAACD,KArDyB,EAuDpCE,UAAY,SAACF,GACX1B,EAAO6B,IAAIH,EAAEI,KAAK,GAEd9B,EAAO+B,IAAI,YAAc/B,EAAO+B,IAAI,MACtCL,EAAEM,kBA3D8B,EA+DpCC,QAAU,SAACP,GACT1B,EAAOkC,OAAOR,EAAEI,MA9DhB,EAAKzB,qBACL,EAAK8B,MAAQtC,EAHqB,E,qDAmE1B,IACAE,EAASqC,KAAKD,MAAdpC,KACR,OACE,sBACEsC,UACEnD,EAAcoD,aAAeF,KAAKD,MAAMrC,SAAW,aAAe,IAEpEyC,GAAIrD,EAAcoD,YAClBE,SAAU,EALZ,UAOE,sCACO,6DADP,0BAGA,0CACY,IACV,mBACEC,KAAK,kDACLvB,OAAO,SACPwB,IAAI,sBAHN,0CAMK,IARP,sDASsD,IACpD,mBACED,KAAK,sBACLvB,OAAO,SACPwB,IAAI,sBAHN,yBAVF,OAmBA,0BACEH,GAAIrD,EAAcyD,SAClBC,KAAK,OACLP,UAAW,6BACXQ,YAAY,4EACZC,KAAM,GACNC,WAAW,OACX9B,MAAOlB,EACP0B,OAAQW,KAAKX,OACbuB,SAAUZ,KAAKrB,kBACfY,QAASS,KAAKT,QACdC,UAAWQ,KAAKR,UAChBK,QAASG,KAAKH,iB,GAlHYgB,IAAMC,W,MElB1CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BnE,M","file":"static/js/main.e7ee104a.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\n\nexport enum HtmlElementId {\n  snComponent = 'sn-component',\n  textarea = 'textarea',\n}\n\nexport enum HtmlClassName {\n  snComponent = 'sn-component',\n  textarea = 'sk-input contrast textarea',\n}\n\nexport interface EditorInterface {\n  printUrl: boolean;\n  text: string;\n}\n\nconst initialState = {\n  printUrl: false,\n  text: '',\n};\n\nlet keyMap = new Map();\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.configureEditorKit();\n    this.state = initialState;\n  }\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState({\n          ...initialState,\n          text,\n        });\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n    this.saveText(value);\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState({\n      text: text,\n    });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error saving note:', error);\n    }\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div\n        className={\n          HtmlElementId.snComponent + (this.state.printUrl ? ' print-url' : '')\n        }\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        <p>\n          Edit <code>src/components/Editor.tsx</code> and save to reload.\n        </p>\n        <p>\n          Visit the{' '}\n          <a\n            href=\"https://docs.standardnotes.org/extensions/intro\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Standard Notes documentation\n          </a>{' '}\n          to learn how to work with the Standard Notes API or{' '}\n          <a\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          .\n        </p>\n        <textarea\n          id={HtmlElementId.textarea}\n          name=\"text\"\n          className={'sk-input contrast textarea'}\n          placeholder=\"Type here. Text in this textarea is automatically saved in Standard Notes\"\n          rows={15}\n          spellCheck=\"true\"\n          value={text}\n          onBlur={this.onBlur}\n          onChange={this.handleInputChange}\n          onFocus={this.onFocus}\n          onKeyDown={this.onKeyDown}\n          onKeyUp={this.onKeyUp}\n        />\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}